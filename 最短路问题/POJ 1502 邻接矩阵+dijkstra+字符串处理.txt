#include<iostream>
#include<cstring>
#include<string>
#include<queue>
using namespace std;

int n;
int mapp[105][105];
int dis[105];
int vis[105];

struct point{
    int v;
    int w;
    point(int vv,int ww):v(vv),w(ww){}
    bool operator <(const point &r)const{
        return w>r.w;
    }
};

//带邻接矩阵的dijkstra
void dijkstra(int start){
    memset(vis,0,sizeof(vis));
    for(int i=1;i<=n;i++) dis[i]=0x3f3f3f3f;
    priority_queue<point> que;
    while(!que.empty()) que.pop();
    dis[start]=0;
    que.push(point(start,dis[start]));
    while(!que.empty()){
        point tmp=que.top();
        que.pop();
        if(vis[tmp.v]) continue;
        vis[tmp.v]=1;
        for(int i=1;i<=n;i++){
            int u=tmp.v;
            int v=i;
            int w=mapp[u][v];
            if(!vis[v]&&dis[v]>dis[u]+w){
                dis[v]=dis[u]+w;
                que.push(point(v,dis[v]));
            }
        }
    }
}

int swapp(string a){
    int temp=1;
    int ans=0;
    for(int i=a.length()-1;i>=0;i--){
        ans+=(a[i]-48)*temp;
        temp=temp*10;
    }
    return ans;
}//字符串的处理

int main(){
    cin>>n;
    for(int i=1;i<=n;i++){
        mapp[i][i]=0;
    }
    for(int i=2;i<=n;i++){
        for(int j=1;j<i;j++){
            string t;
            cin>>t;
            if(t=="x"){
                mapp[i][j]=0x3f3f3f3f;
                mapp[j][i]=0x3f3f3f3f;
            }
            else{
                mapp[i][j]=swapp(t);
                mapp[j][i]=mapp[i][j];
            }
        }
    }
    dijkstra(1);
    int maxx=0;
    for(int i=1;i<=n;i++){
        if(dis[i]>maxx) maxx=dis[i];
    }
    cout<<maxx<<endl;
}